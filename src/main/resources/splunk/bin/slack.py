import sys
import json
import urllib2
import re
import time
from fnmatch import fnmatch

def url_decode(urlstring):
    return '<' + urlstring + '>'

def decode_all_urls(messagestring):
    urlre = r'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\(\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+'
    return re.sub(urlre, decode_all_matching_urls, messagestring)

def decode_all_matching_urls(match):
    match = match.group()
    return url_decode(match)

SEVERITY_COLORS = ['#555555','#6DB7C6','#65A637','#F7BC38','#F58F39','#D93F3C']

def build_fields_attachment(payload):
    res = payload['result']
    available_fields = res.keys()
    field_attachments = []
    seen_fields = set()
    field_list = re.split(r'\s*,\s*', payload['configuration']['fields'].strip())
    for f in field_list:
        for af in available_fields:
            if af not in seen_fields and fnmatch(af, f):
                seen_fields.add(af)
                val = res[af]
                if type(val) == list:
                    val = val[0]
                field_attachments.append(dict(title=af, value=val, short=True))
    return field_attachments


def build_alert_attachment(payload):
    config = payload['configuration']
    attachment = dict()
    if 'info_severity' in config:
        try:
            attachment['color'] = SEVERITY_COLORS[int(config['info_severity'])]
        except: pass
    attachment['fallback'] = "Alert generated by Splunk: " + payload['results_link']
    attachment['title'] = payload['search_name'] if payload['search_name'] else "Ad-hoc search"
    attachment['message'] = "Click to show results"
    attachment['title_link'] = payload['results_link']
    attachment['footer'] = 'Splunk Alert'
    attachment['footer_icon'] = 'https://s3-us-west-1.amazonaws.com/ziegfried-apps/slack-alerts/splunk-icon.png'
    attachment['footer_link'] = config['view_link']
    if '_time' in payload['result']:
        try:
            attachment['ts'] = int(float(config['info_trigger_time']))
        except: pass
    if config['fields']:
        attachment['fields'] = build_fields_attachment(payload)
    return attachment

def send_slack_message(settings, payload):
    params = dict()

    # Decode the results link since it was already encoded; otherwise, it will be double encoded
    params['text'] = decode_all_urls(settings.get('message'))

    params['username'] = settings.get('from_user', 'Splunk')
    params['icon_url'] = settings.get('from_user_icon')

    channel = settings.get('channel')
    if channel:
        params['channel'] = channel
    else:
        print >> sys.stderr, "WARN No channel supplied, using default for webhook"

    if config['attachment'] == 'alert_link':
        params['attachments'] = [build_alert_attachment(payload)]
    elif config['fields']:
        params['attachments'] = [dict(fields=build_fields_attachment(payload))]

    url = settings.get('webhook_url')
    if not url.startswith('https:'):
        print >> sys.stderr, "FATAL Invalid webhook URL specified. The URL must use HTTPS."
        return False

    body = json.dumps(params)

    print >> sys.stderr, 'DEBUG Calling url="%s" with body=%s' % (url, body)
    req = urllib2.Request(url, body, {"Content-Type": "application/json"})
    try:
        res = urllib2.urlopen(req)
        body = res.read()
        print >> sys.stderr, "INFO Slack API responded with HTTP status=%d" % res.code
        print >> sys.stderr, "DEBUG Slack API response: %s" % json.dumps(body)
        return 200 <= res.code < 300
    except urllib2.HTTPError, e:
        print >> sys.stderr, "ERROR Error sending message: %s" % e
        return False


if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == "--execute":
        payload = json.loads(sys.stdin.read())
        print >> sys.stderr, "ERROR PAYLOAD " + json.dumps(payload)
        config = payload.get('configuration')
        if not send_slack_message(config, payload):
            print >> sys.stderr, "FATAL Sending the slack message failed"
            sys.exit(5)
